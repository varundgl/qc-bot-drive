## MARKDOWN CELL ##
Problem Statement:

Building an AI Agent Using Google SDK to Automate Real-Time Web Search Tasks

Objective:

Develop a simple autonomous AI Agent that takes a user-defined goal, performs real-time web searches using the Google Custom Search API (Google SDK), and presents relevant results to the user. The agent should also retain memory of past goals and results for reference.
----
## MARKDOWN CELL ##
Key Features:
* Accept a user-defined goal (search query).
* Use Google Custom Search API to fetch top search results.
* Display the top 3 results including title, URL, and snippet.
* Store the goal and results in memory for future use.
* Provide an option to refine the goal manually or conclude the session.
----
## MARKDOWN CELL ##
Expected Outcome:
* A functional, interactive AI Agent that demonstrates

 Goal → Tool → Action → Result

* Real-time search result delivery based on user inputs.

* A memory system that logs all goals and search outcomes during the session.
----
## CODE CELL ##
# === Install the required package ===
!pip install google-api-python-client

# === Import necessary modules ===
from googleapiclient.discovery import build

# === API Configuration ===

# === Memory to store past goals and results ===
memory = []

# === Define the tool function using Google SDK ===
def google_search(query):
    print(f"\n[Tool] Searching Google for: '{query}'")
    service = build("customsearch", "v1", developerKey=API_KEY)
    res = service.cse().list(q=query, cx=SEARCH_ENGINE_ID).execute()
    return res['items']

# === Define the AI Agent's Reasoning Loop ===
def agent_reasoning_loop(goal):
    print(f"\n[Agent] Received Goal: '{goal}'")

    # Use Google Search Tool
    results = google_search(goal)

    # Display Top 3 Results
    print(f"\n[Agent] Top 3 Results for '{goal}':\n")
    for idx, item in enumerate(results[:3]):
        print(f"Result {idx+1}:")
        print("Title:", item['title'])
        print("URL:", item['link'])
        print("Snippet:", item['snippet'])
        print("-" * 50)

    # Store in Memory
    memory.append({'goal': goal, 'results': results[:3]})
    print(f"\n[Memory] Stored Goal & Results. Total stored goals: {len(memory)}")

# === Real-Time Interaction ===
print("Welcome to AI Agent + Google SDK!")

# Take user input for search goal
user_goal = input("Enter your search goal (e.g., 'top AI research labs in 2025'): ")

# Run the reasoning loop with the user's goal
agent_reasoning_loop(user_goal)

# === Show all memory at the end ===
print("\n=== Final Memory Log ===")
for m in memory:
    print(f"\nGoal: {m['goal']}")
    for r in m['results']:
        print(f" - {r['title']} ({r['link']})")
----
## MARKDOWN CELL ##
Constraints:
* The agent operates only with manual refinement (no AI-generated refinements).
* Search is limited to what the Google Custom Search API can return within quota limits.
----
## MARKDOWN CELL ##
Enhancements:
* Let GPT also summarize the search results.

* Automatically generate next questions based on the results.

* Add multi-turn conversations where GPT acts as a guide.
----
## MARKDOWN CELL ##
Old Constraint:

* Manual refinement needed after each search.

Now:
* GPT automatically refines queries based on the original goal.

The agent becomes self-sufficient:

* It thinks (refines),

* Acts (searches),

* Learns (stores memory).
----
## MARKDOWN CELL ##
Flow of Execution:
* Agent receives goal → e.g., "top AI research labs in 2025".

* Searches Google using that goal.

* Refines goal using GPT → e.g., "leading artificial intelligence research institutes worldwide 2025".

* Searches Google again using GPT-refined goal.

* Stores both goals and results in memory.
----
## CODE CELL ##
# === Imports ===
import openai
from googleapiclient.discovery import build

# === API Keys ===
API_KEY = 'AIzaSyDZGmR6WcCU61cxpwSq70-jnJcOeh9PHHI'  # <-- Replace with your API Key
SEARCH_ENGINE_ID = 'd16ee106ddcee4931'  # <-- Replace with your Search Engine ID
openai.api_key = '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'  # <-- Replace this

# === Memory Store ===
memory = []

# === Tool 1: Google Search ===
def google_search(query):
    print(f"\n[Tool] Searching Google for: '{query}'")
    service = build("customsearch", "v1", developerKey=API_KEY)
    res = service.cse().list(q=query, cx=SEARCH_ENGINE_ID).execute()
    return res['items']

# === Tool 2: OpenAI GPT for Refinement (Updated Syntax) ===
def refine_query_with_gpt(original_query):
    print(f"\n[GPT] Refining query for: '{original_query}'")
    prompt = f"Suggest a more detailed and specific version of this search query: '{original_query}'"

    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",  # or "gpt-4"
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=50
    )

    refined_query = response.choices[0].message.content.strip()
    print(f"[GPT] Refined Query: '{refined_query}'")
    return refined_query

# === AI Agent's Reasoning Loop ===
def agent_reasoning_loop(goal):
    print(f"\n[Agent] Received Goal: '{goal}'")

    # First search with original goal
    results_original = google_search(goal)

    # Display Top 3 Results (Original)
    print(f"\n[Agent] Top 3 Results for Original Goal '{goal}':\n")
    for idx, item in enumerate(results_original[:3]):
        print(f"Result {idx+1}:")
        print("Title:", item['title'])
        print("URL:", item['link'])
        print("Snippet:", item['snippet'])
        print("-" * 50)

    # Refine goal using GPT
    refined_goal = refine_query_with_gpt(goal)
    results_refined = google_search(refined_goal)

    # Display Top 3 Results (Refined)
    print(f"\n[Agent] Top 3 Results for Refined Goal '{refined_goal}':\n")
    for idx, item in enumerate(results_refined[:3]):
        print(f"Result {idx+1}:")
        print("Title:", item['title'])
        print("URL:", item['link'])
        print("Snippet:", item['snippet'])
        print("-" * 50)

    # Store both in memory
    memory.append({
        'original_goal': goal,
        'refined_goal': refined_goal,
        'results_original': results_original[:3],
        'results_refined': results_refined[:3]
    })
    print(f"\n[Memory] Stored Original & Refined Goals. Total stored: {len(memory)}")

# === Run Agent with User Input ===
print("Welcome to AI Agent with OpenAI GPT + Google SDK!")

# Get the user goal via input
user_goal = input("Enter your search goal (e.g., 'latest AI trends 2025'): ")

# Run the reasoning loop with the user's goal
agent_reasoning_loop(user_goal)

# === Show Memory Log ===
print("\n=== Final Memory Log ===")
for m in memory:
    print(f"\nOriginal Goal: {m['original_goal']}")
    print(f"Refined Goal: {m['refined_goal']}")
    for r in m['results_refined']:
        print(f" - {r['title']} ({r['link']})")
----